{
  "version": 1,
  "nodes": [
    {
      "name": "",
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/src/particles.ts",
        "line": 1,
        "col": 0,
        "byteIndex": 0
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Think of particles as your design tokens, those nifty little helpers for your UI! While design tokens can be implemented in various ways (like css-in-js, CSS variables, or Sass modules), we've chosen to roll with **Tailwind components** for their flexibility and ease of use. Since particles are essentially Tailwind styles, they're represented as strings. But hey, strings can get messy, right? That's where the `@vyn/cn` package comes to the rescue, helping us keep things organized and manageable! Particles are primarily used by atoms, but feel free to sprinkle them as classes on any element you fancy.\n",
        "tags": [
          {
            "kind": "module",
            "name": "particles"
          }
        ]
      },
      "kind": "moduleDoc"
    },
    {
      "name": "area",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/particles/area.ts",
        "line": 15,
        "col": 6,
        "byteIndex": 315
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This particle contains the styles that are common between the `<Page.Header/>` and\n`<Page.Footer/>` atoms.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport area from 'lunchbox/particles/area.ts';\n\n<section class={area}>...</section>\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "string",
          "kind": "keyword",
          "keyword": "string"
        },
        "kind": "const"
      }
    },
    {
      "name": "btn",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/particles/btn.ts",
        "line": 13,
        "col": 6,
        "byteIndex": 242
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This particle contains the styles that are common in button atoms.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport btn from 'lunchbox/particles/btn.ts';\n\n<button class={btn}>Button</button>\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "string",
          "kind": "keyword",
          "keyword": "string"
        },
        "kind": "const"
      }
    },
    {
      "name": "clr",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/particles/clr.ts",
        "line": 23,
        "col": 6,
        "byteIndex": 834
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This is a dictionary of particles that represent color styles for text, background, border, and\noutline. They already contain the dark mode classes, so you don't need to add `dark:` to the\nclass name.\n\n- `neutral`: The default for text, border, and outline. As a background it is a multi-purpose\n  utility.\n- `brand`: A representation of the brand's personality and identity.\n- `error`: \"Red-ish\" colors errors.\n- `page`: The default background of the page.\n- `panel`: A background that feels as a physical section for panels.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport clr from 'lunchbox/particles/clr.ts';\n\n<div class={clr.neutral.bg}>Example background</div>\n<div class={clr.neutral.txt}>Example text</div>\n```\n"
          },
          {
            "kind": "unsupported",
            "value": "@todo Update to new shading syntax in the tailwind v4 version."
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "Record",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "Record",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ],
                  "typeName": "Record"
                }
              }
            ],
            "typeName": "Record"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "focus",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/particles/focus.ts",
        "line": 14,
        "col": 6,
        "byteIndex": 279
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This particle contains the styles for any element's focus state.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport focus from 'lunchbox/particles/focus.ts';\n\n<div tabIndex={0} class={focus}>{...</div>\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "string",
          "kind": "keyword",
          "keyword": "string"
        },
        "kind": "const"
      }
    },
    {
      "name": "input",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/particles/input.ts",
        "line": 23,
        "col": 6,
        "byteIndex": 666
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This is a dictionary of particles that represent parts of inputs that repeat accross multiple atoms\nor molecules.\n\n- `required`: The standard required indicator (`*`) with a contrasting color.\n- `invalid`: The background of an invalid input.\n- `abstract`: An abstract particle shared in many input atoms.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport input from 'lunchbox/particles/input.ts';\n\n// Required input label\n<label class={input.required}>Label text</label>\n// Usage of the abstract particle\n<input class={input.abstract} />\n// Invalid input\n<input class={input.invalid} />\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "Record",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            ],
            "typeName": "Record"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "layout",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/particles/layout.ts",
        "line": 16,
        "col": 6,
        "byteIndex": 397
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This is particle contains the styles for the library's grid system container. Children of elements\ncontaining this styles should use the extended tailwind `gridColumn` settings.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport layout from 'lunchbox/particles/layout.ts';\n\n<div class={layout}>\n <div class=\"grid-cols-12\">...</div>\n</div>\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "string",
          "kind": "keyword",
          "keyword": "string"
        },
        "kind": "const"
      }
    },
    {
      "name": "txt",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/particles/txt.ts",
        "line": 13,
        "col": 6,
        "byteIndex": 400
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This is a dictionary of particles that represent the different text sizes and line heights. These\nare used in the Text atoms along with other standarized styles. In most cases, the\n`<Text.Base/>` atom is recommended over the `txt.base` particle.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport txt from 'lunchbox/particles/txt.ts';\n\n<span class={txt.base}>Base text</span>\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "Record",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            ],
            "typeName": "Record"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "Aside",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/src/atoms.ts",
        "line": 11,
        "col": 7,
        "byteIndex": 652
      },
      "declarationKind": "export",
      "kind": "namespace",
      "namespaceDef": {
        "elements": [
          {
            "name": "Sticky",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Aside.tsx",
              "line": 17,
              "col": 13,
              "byteIndex": 661
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A sticky sidebar component optimized for desktop layouts, commonly used for page-level navigation like tables of contents that follow the user's scroll position. While it can be used on mobile, the limited horizontal space often makes this pattern less practical on smaller screens. The sticky behavior keeps the content accessible while scrolling through the main content area.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Aside from 'lunchbox/atoms/Aside.tsx';\n\n<Aside.Sticky>\n  <p>Hello</p>\n</Aside.Sticky>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLDivElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLDivElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          }
        ]
      }
    },
    {
      "name": "Button",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/src/atoms.ts",
        "line": 16,
        "col": 7,
        "byteIndex": 964
      },
      "declarationKind": "export",
      "kind": "namespace",
      "namespaceDef": {
        "elements": [
          {
            "name": "Brand",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Button.tsx",
              "line": 19,
              "col": 13,
              "byteIndex": 549
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Primary call-to-action button using brand colors. Use for main form submissions, key conversion points, and primary user flows where you want to direct user attention.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Button from 'lunchbox/atoms/Button.tsx';\n\n<Button.Brand onClick={handleClick}>\n  Click me!\n</Button.Brand>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLButtonElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLButtonElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Page",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Button.tsx",
              "line": 44,
              "col": 13,
              "byteIndex": 1156
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Contextual button that provides subtle contrast on pages but stands out on panels. Perfect for secondary actions, navigation elements, and interactive components within panel containers.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Button from 'lunchbox/atoms/Button.tsx';\n\n<Button.Page onClick={handleClick}>\n  Click me!\n</Button.Page>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLButtonElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLButtonElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Panel",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Button.tsx",
              "line": 69,
              "col": 13,
              "byteIndex": 1752
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Contextual button that blends with panels but contrasts against pages. Ideal for toolbar actions, filter controls, and situations where multiple buttons need to work together visually.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Button from 'lunchbox/atoms/Button.tsx';\n\n<Button.Panel onClick={handleClick}>\n  Click me!\n</Button.Panel>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLButtonElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLButtonElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Error",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Button.tsx",
              "line": 94,
              "col": 13,
              "byteIndex": 2343
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Warning button using error colors for destructive or irreversible actions. Essential for account deletion, permanent data removal, or any action requiring explicit user caution.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Button from 'lunchbox/atoms/Button.tsx';\n\n<Button.Error onClick={handleClick}>\n  Click me!\n</Button.Error>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLButtonElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLButtonElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          }
        ]
      }
    },
    {
      "name": "Code",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/src/atoms.ts",
        "line": 21,
        "col": 7,
        "byteIndex": 1240
      },
      "declarationKind": "export",
      "kind": "namespace",
      "namespaceDef": {
        "elements": [
          {
            "name": "Content",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Code.tsx",
              "line": 24,
              "col": 13,
              "byteIndex": 536
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The innermost component that holds the actual code. It requires a container parent component to function properly.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Code from 'lunchbox/atoms/Code.tsx';\n\n<p>\n  Use the{\" \"}\n  <Code.Inline>\n    <Code.Content>\n      npm install\n    </Code.Content>\n  </Code.Inline>\n  {\" \"}command.\n</p>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLSpanElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLSpanElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Inline",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Code.tsx",
              "line": 53,
              "col": 13,
              "byteIndex": 1167
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates a single-line code display optimized for technical terms and commands within flowing text. Provides the styling context that Content components need for inline presentation.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Code from 'lunchbox/atoms/Code.tsx';\n\n<p>\n  Use the{\" \"}\n  <Code.Inline>\n    <Code.Content>\n      npm install\n    </Code.Content>\n  </Code.Inline>\n  {\" \"}command.\n</p>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLSpanElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLSpanElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Block",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Code.tsx",
              "line": 84,
              "col": 13,
              "byteIndex": 1916
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates a multi-line code display with features like line numbers and copy buttons. Like Inline, provides styling context for Content, but with additional functionality for larger code samples.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage - WIP\n```ts\nimport * as Code from 'lunchbox/atoms/Code.tsx';\n\n<Code.Block>\n  <Code.Content>\n    const greeting = 'Hello World';\n    console.log(greeting);\n  </Code.Content>\n</Code.Block>\n```\n"
                },
                {
                  "kind": "unsupported",
                  "value": "@todo [DEV] Finish implementing this atom."
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLDivElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLDivElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          }
        ]
      }
    },
    {
      "name": "Details",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/src/atoms.ts",
        "line": 26,
        "col": 7,
        "byteIndex": 1538
      },
      "declarationKind": "export",
      "kind": "namespace",
      "namespaceDef": {
        "elements": [
          {
            "name": "Container",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Details.tsx",
              "line": 18,
              "col": 13,
              "byteIndex": 474
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The container for the details element that is shown/hidden when a summary atom is clicked.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Details from 'lunchbox/atoms/Details.tsx';\n\n<Details.Container open={p.open}>\n  <Details.Summary>{p.summary}</Details.Summary>\n</Details.Container>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLDetailsElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLDetailsElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Summary",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Details.tsx",
              "line": 43,
              "col": 13,
              "byteIndex": 999
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The summary element that prompts the user to click to show/hide a container atom.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Details from 'lunchbox/atoms/Details.tsx';\n\n<Details.Container open={p.open}>\n  <Details.Summary>{p.summary}</Details.Summary>\n</Details.Container>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          }
        ]
      }
    },
    {
      "name": "Input",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/src/atoms.ts",
        "line": 31,
        "col": 7,
        "byteIndex": 1978
      },
      "declarationKind": "export",
      "kind": "namespace",
      "namespaceDef": {
        "elements": [
          {
            "name": "Field",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 19,
              "col": 13,
              "byteIndex": 755
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The standard single-line text input element that users are most familiar with. It represents the HTML `<input>` element for text, numbers, email, etc. For a complete input field with label and error handling, use the {@linkcode /@lunchbox/ui/doc/molecules/~/InputFieldCombo | InputFieldCombo} molecule.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Field class=\"my-input\" placeholder=\"Enter text\" />\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLInputElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLInputElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Label",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 43,
              "col": 13,
              "byteIndex": 1380
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Container that wraps an input and its label text, ensuring proper semantic HTML by creating the necessary association between them. This is crucial for accessibility as screen readers will announce the label when the input is focused.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Label class=\"my-label\">Label</Input.Label>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLLabelElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLLabelElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Container",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 62,
              "col": 13,
              "byteIndex": 1913
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A wrapper component that maintains consistent vertical spacing between input groups. This helps create visual hierarchy and improves form readability by ensuring inputs don't feel cramped or too spread out.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Container class=\"my-container\">\n  <Input.Field />\n</Input.Container>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLDivElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLDivElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Text",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 79,
              "col": 13,
              "byteIndex": 2389
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Renders text content specifically styled for form contexts like labels, help text, and descriptions. Uses standardized styling to maintain consistency across all text elements in forms.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Text class=\"my-text\">Help text</Input.Text>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLSpanElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLSpanElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Error",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 99,
              "col": 13,
              "byteIndex": 2902
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Displays validation error messages with distinct error styling (typically red text/borders). Positioned below the input field to provide clear feedback when form validation fails.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Error class=\"my-error\">This field is required.</Input.Error>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLSpanElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLSpanElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Radio",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 116,
              "col": 13,
              "byteIndex": 3516
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Styled radio button input for single-choice selections. For a complete radio input group, use the {@linkcode /@lunchbox/ui/doc/molecules/~/FieldsetRadio | FieldsetRadio} molecule, or for a single radio button with label use {@linkcode /@lunchbox/ui/doc/molecules/~/InputRadioCombo | InputRadioCombo}\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Radio class=\"my-radio\" name=\"group\" value=\"option1\" />\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLInputElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLInputElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Fieldset",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 147,
              "col": 13,
              "byteIndex": 4595
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Groups related form controls together both semantically and visually. Adds a subtle border and background to create visual separation between different sections of a form. Essential for organizing complex forms with multiple related inputs. For complete fieldset components, see {@linkcode /@lunchbox/ui/doc/molecules/~/FieldsetCheck | FieldsetCheck} for checkboxes or {@linkcode /@lunchbox/ui/doc/molecules/~/FieldsetRadio | FieldsetRadio} for radio buttons.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Fieldset class=\"my-fieldset\">\n  <Input.Radio name=\"group\" value=\"option1\" />\n  <Input.Radio name=\"group\" value=\"option2\" />\n</Input.Fieldset>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLFieldSetElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLFieldSetElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Legend",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 168,
              "col": 13,
              "byteIndex": 5143
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Provides a title or description for a fieldset, helping users understand the purpose of grouped form controls. Styled to stand out from regular labels while maintaining visual harmony.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Legend class=\"my-legend\">Group Title</Input.Legend>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLLegendElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLLegendElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Check",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 185,
              "col": 13,
              "byteIndex": 5711
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Styled checkbox input for multi-choice selections. For a complete checkbox group, use the {@linkcode /@lunchbox/ui/doc/molecules/~/FieldsetCheck | FieldsetCheck} molecule, or for a single checkbox with label use {@linkcode /@lunchbox/ui/doc/molecules/~/InputCheckCombo | InputCheckCombo}\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Check class=\"my-check\" name=\"option1\" />\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLInputElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLInputElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Textarea",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 213,
              "col": 13,
              "byteIndex": 6444
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Multi-line text input for longer form content. For a complete textarea with label and error handling, use the {@linkcode /@lunchbox/ui/doc/molecules/~/InputTextareaCombo | InputTextareaCombo} molecule.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Textarea class=\"my-textarea\" placeholder=\"Enter your message\" />\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLTextAreaElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLTextAreaElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Select",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 239,
              "col": 13,
              "byteIndex": 7133
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Dropdown select input for choosing from predefined options. For a complete select input with label and error handling, use the {@linkcode /@lunchbox/ui/doc/molecules/~/InputSelectCombo | InputSelectCombo} molecule.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Select class=\"my-select\">\n  <option value=\"option1\">Option 1</option>\n  <option value=\"option2\">Option 2</option>\n</Input.Select>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLSelectElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLSelectElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "Submit",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Input.tsx",
              "line": 263,
              "col": 13,
              "byteIndex": 7710
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Submit button with brand styling that looks like {@linkcode /@lunchbox/ui/doc/atoms/~/Button.Brand | Button.Brand} while maintaining the functionality of an `<input type=\"submit\">` element.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Input from 'lunchbox/atoms/Input.tsx';\n\n<Input.Submit class=\"my-submit\" value=\"Submit\" />\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLInputElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLInputElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          }
        ]
      }
    },
    {
      "name": "List",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/src/atoms.ts",
        "line": 36,
        "col": 7,
        "byteIndex": 2085
      },
      "declarationKind": "export",
      "kind": "namespace",
      "namespaceDef": {
        "elements": [
          {
            "name": "ul",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/List.tsx",
              "line": 19,
              "col": 13,
              "byteIndex": 507
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Unordered list atom that uses bullet points. Essential for presenting related items where\n order doesn't matter. Commonly used in feature lists, navigation menus, and content hierarchies.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as List from 'lunchbox/atoms/List.tsx';\n\n<List.ul>\n  <li>First bullet point</li>\n  <li>Second bullet point</li>\n</List.ul>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLUListElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLUListElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "ol",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/List.tsx",
              "line": 43,
              "col": 13,
              "byteIndex": 996
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Ordered list atom that uses numbers. Critical for sequences, instructions, and prioritized content where order matters.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as List from 'lunchbox/atoms/List.tsx';\n\n<List.ol>\n  <li>First numbered item</li>\n  <li>Second numbered item</li>\n</List.ol>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLUListElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLUListElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          }
        ]
      }
    },
    {
      "name": "Nav",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/src/atoms.ts",
        "line": 41,
        "col": 7,
        "byteIndex": 2245
      },
      "declarationKind": "export",
      "kind": "namespace",
      "namespaceDef": {
        "elements": [
          {
            "name": "Sticky",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Nav.tsx",
              "line": 20,
              "col": 13,
              "byteIndex": 652
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A navigation container that maintains its position at the top of the viewport while scrolling. Essential for ensuring critical navigation links remain accessible throughout the user's journey, particularly on longer pages or in single-page applications.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Usage\n```ts\nimport * as Nav from 'lunchbox/atoms/Nav.tsx';\n\n<Nav.Sticky>\n  <a href=\"/\">Home</a>\n  <a href=\"/about\">About</a>\n</Nav.Sticky>\n```"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "JSX.Element",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JSX.Element"
                    }
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "iAtom",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "HTMLElement",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "HTMLElement"
                              }
                            }
                          ],
                          "typeName": "iAtom"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "kind": "const"
            }
          }
        ]
      }
    },
    {
      "name": "",
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/src/atoms.ts",
        "line": 1,
        "col": 0,
        "byteIndex": 0
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This module manages the base of the hierarchy of the components of this library. The definition of an Atom is a component made up of an HTMLElement, because of this, they must be declared using the type iAtom that links them to the properties of an HTMLElement. Atoms use {@linkcode /@lunchbox/ui/doc/particles | \"Particles\"}  to style themselves. Particles are smaller and more abstract things that don't represent HTML elements.\n",
        "tags": [
          {
            "kind": "module",
            "name": "atoms"
          }
        ]
      },
      "kind": "moduleDoc"
    },
    {
      "name": "H0",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Heading.tsx",
        "line": 19,
        "col": 0,
        "byteIndex": 692
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "An `H0` heading is a for large decorative text. The `H1-3` headings have ver specific semantic and structural purposes for accessibility. This heading has no semantic attachment, it's simply large text you can use for banners, titles in hero sections, etc. This component is exempt from all rules other headings usually have.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport { H0 } from 'lunchbox/atoms/Heading.tsx'\n\n<H0>Decorative text</H0>\n```\n"
          },
          {
            "kind": "unsupported",
            "value": "@todo [DEV] Adjust size for small screens."
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "p",
            "optional": false,
            "tsType": {
              "repr": "iAtom",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "HTMLSpanElement",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "HTMLSpanElement"
                    }
                  }
                ],
                "typeName": "iAtom"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "H1",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Heading.tsx",
        "line": 45,
        "col": 0,
        "byteIndex": 1485
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "A heading for page titles. The `H1` atom has a very specific place in the structure of the page. For a correct semantic in the page, there shouldn't by more than **one** single instance of this component for every page. This is a behavior similar to the {@linkcode @lunchbox/ui/doc/atoms/~/Page.Main | Page.Main} atom. Additionally, this component must be placed before all other semantic heading components.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport { H1 } from 'lunchbox/atoms/Heading.tsx'\n\n<H1>Page title</H1>\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "p",
            "optional": false,
            "tsType": {
              "repr": "iAtom",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "HTMLHeadingElement",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "HTMLHeadingElement"
                    }
                  }
                ],
                "typeName": "iAtom"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "H2",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Heading.tsx",
        "line": 73,
        "col": 0,
        "byteIndex": 2150
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "A heading for section titles. The `H2` requires an {@linkcode @lunchbox/ui/doc/atoms/~/H1 | H1} atom to exist and for it to be before this one. This hierarchy of `H1->H2` is required for a correct accessibility in a page.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport { H1, H2 } from 'lunchbox/atoms/Heading.tsx'\n\n<H1>Page title</H1>\n  <H2>Section title</H2>\n  <H2>Section title</H2>\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "p",
            "optional": false,
            "tsType": {
              "repr": "iAtom",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "HTMLHeadingElement",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "HTMLHeadingElement"
                    }
                  }
                ],
                "typeName": "iAtom"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "H3",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Heading.tsx",
        "line": 104,
        "col": 0,
        "byteIndex": 3051
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "A heading for sub-section titles. The `H3` is the smallest heading component in the library. Headings smaller than this one are niche enough to be customly developed. This heading, like its larger peers {@linkcode @lunchbox/ui/doc/atoms/~/H1 | H1} and {@linkcode @lunchbox/ui/doc/atoms/~/H2 | H2} must follow the hierarchy of `H1->H2->H3`.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport { H1, H2, H3 } from 'lunchbox/atoms/Heading.tsx'\n\n<H1>Page title</H1>\n  <H2>Section title</H2>\n    <H3>Sub-section title</H3>\n    <H3>Sub-section title</H3>\n  <H2>Section title</H2>\n    <H3>Sub-section title</H3>\n    <H3>Sub-section title</H3>\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "p",
            "optional": false,
            "tsType": {
              "repr": "iAtom",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "HTMLHeadingElement",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "HTMLHeadingElement"
                    }
                  }
                ],
                "typeName": "iAtom"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "Body",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Page.tsx",
        "line": 24,
        "col": 0,
        "byteIndex": 785
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The Body atom is essential for establishing a consistent theming foundation across your app. Without it, you'd need to manually handle dark mode transitions, font inheritance, and color schemes on every page. By using this atom at your app's root, you ensure all nested components inherit the correct theme context and base styles.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\n// ./routes/_app.tsx or middleware.\nimport { Body } from 'lunchbox/atoms/Page.tsx';\n\n<html>\n  {...}\n  <Body>\n    <Component />\n  </Body>\n</html>\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "p",
            "optional": false,
            "tsType": {
              "repr": "iAtom",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "HTMLBodyElement",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "HTMLBodyElement"
                    }
                  }
                ],
                "typeName": "iAtom"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "Footer",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Page.tsx",
        "line": 102,
        "col": 0,
        "byteIndex": 2819
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The Footer atom creates a predictable location for important site-wide information and secondary navigation. By using this atom instead of a generic container, you maintain semantic HTML structure while ensuring footer content is consistently positioned and styled across all pages.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\n// ./routes/_app.tsx or middleware.\nimport { Main, Footer } from 'lunchbox/atoms/Page.tsx';\n\n<Main>{...}</Main>\n<Footer>{...}</Footer>\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "p",
            "optional": false,
            "tsType": {
              "repr": "iAtom",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "HTMLElement",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "HTMLElement"
                    }
                  }
                ],
                "typeName": "iAtom"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "Header",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Page.tsx",
        "line": 77,
        "col": 0,
        "byteIndex": 2154
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The Header atom standardizes navigation placement and branding across your app. Instead of building custom headers for each page, this atom provides a semantic container that maintains your app's visual hierarchy and ensures consistent user navigation patterns.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\n// ./routes/_app.tsx or middleware.\nimport { Main, Header } from 'lunchbox/atoms/Page.tsx';\n\n<Header>{...}</Header>\n<Main>{...}</Main>\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "p",
            "optional": false,
            "tsType": {
              "repr": "iAtom",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "HTMLElement",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "HTMLElement"
                    }
                  }
                ],
                "typeName": "iAtom"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "Main",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Page.tsx",
        "line": 50,
        "col": 0,
        "byteIndex": 1471
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The Main atom enforces a consistent content structure across your application. Rather than letting each page define its own layout rules, this atom ensures your primary content always follows accessibility best practices and maintains visual consistency with the rest of the app.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\n// ./routes/_app.tsx or middleware.\nimport { Main } from 'lunchbox/atoms/Page.tsx';\n\n<Main>{...}</Main>\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "p",
            "optional": false,
            "tsType": {
              "repr": "iAtom",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "HTMLElement",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "HTMLElement"
                    }
                  }
                ],
                "typeName": "iAtom"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "KatexStyles",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/KatexStyles.tsx",
        "line": 23,
        "col": 6,
        "byteIndex": 647
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This atom renders the CSS styles necessary for the `deno-gfm` package to render LaTeX equations in markdown content. Works in conjunction with the {@linkcode /@lunchbox/ui/doc/atoms/~/Prose | Prose} atom which handles the actual markdown rendering.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport KatexStyles from 'lunchbox/atoms/KatexStyles.tsx';\nimport Prose from 'lunchbox/atoms/Prose.tsx';\n\n<head>\n  <KatexStyles />\n</head>\n<body>\n  <Prose>\n    {LaTeX content}\n  </Prose>\n</body>\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "JSX.Element",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "JSX.Element"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "p",
                "optional": false,
                "tsType": {
                  "repr": "iAtom",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "HTMLStyleElement",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "HTMLStyleElement"
                        }
                      }
                    ],
                    "typeName": "iAtom"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "Kbd",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Kbd.tsx",
        "line": 17,
        "col": 6,
        "byteIndex": 458
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Displays keyboard shortcuts and key combinations in a visually distinct way. Particularly useful in\ndocumentation, tutorials, and command references.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport Kbd from 'lunchbox/atoms/Kbd.tsx';\n\n<p>Press <Kbd>Ctrl</Kbd> + <Kbd>C</Kbd> to copy</p>\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "JSX.Element",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "JSX.Element"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "p",
                "optional": false,
                "tsType": {
                  "repr": "iAtom",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "HTMLElement",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "HTMLElement"
                        }
                      }
                    ],
                    "typeName": "iAtom"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "Link",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Link.tsx",
        "line": 17,
        "col": 6,
        "byteIndex": 457
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Provides consistent link styling and behavior across the application, with built-in hover states and\nfocus indicators. Essential for navigation and content references.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport Link from 'lunchbox/atoms';\n\n<Link href=\"/about\">About Us</Link>\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "JSX.Element",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "JSX.Element"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "p",
                "optional": false,
                "tsType": {
                  "repr": "iAtom",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "HTMLAnchorElement",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "HTMLAnchorElement"
                        }
                      }
                    ],
                    "typeName": "iAtom"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "Prose",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Prose.tsx",
        "line": 17,
        "col": 6,
        "byteIndex": 551
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This atom contains style settings for the `@tailwind/typeography` plugin and works with the `deno-gfm` package to render markdown content. It can be used by itself, but using the {@linkcode /@lunchbox/ui/doc/molecules/~/Markdown | Markdown} molecule is highly recommended to avoid redundancies.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport Prose from 'lunchbox/atoms/Prose.tsx';\n\n<Prose>\n  <p>Hello</p>\n</Prose>\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "JSX.Element",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "JSX.Element"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "p",
                "optional": false,
                "tsType": {
                  "repr": "iAtom",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "HTMLDivElement",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "HTMLDivElement"
                        }
                      }
                    ],
                    "typeName": "iAtom"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "Separator",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/atoms/Separator.tsx",
        "line": 17,
        "col": 6,
        "byteIndex": 467
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates visual separation between content sections with a neutral-colored horizontal line. Useful for\nbreaking up long content into logical segments while maintaining visual hierarchy.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport Separator from 'lunchbox/atoms/Separator.tsx';\n\n<Separator />\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "JSX.Element",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "JSX.Element"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "p",
                "optional": false,
                "tsType": {
                  "repr": "iAtom",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "HTMLHRElement",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "HTMLHRElement"
                        }
                      }
                    ],
                    "typeName": "iAtom"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "",
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/src/molecules.ts",
        "line": 1,
        "col": 0,
        "byteIndex": 0
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "This module exports various Molecule components, which are essential building blocks in our UI library. Molecules are multi-element components composed of Atoms and, in some cases, Particles. They serve as a standard unit of interface, striking a balance between simplicity and complexity.\n- **Non-Reactive**: Molecules do not require client-side JavaScript to function, ensuring they are\n  lightweight and efficient.\n- **Simplicity**: Designed to be straightforward, Molecules should not have excessive configuration\n  options, making them easy to use and integrate.\n",
        "tags": [
          {
            "kind": "module",
            "name": "molecules"
          }
        ]
      },
      "kind": "moduleDoc"
    },
    {
      "name": "Accordion",
      "isDefault": true,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/Accordion.tsx",
        "line": 57,
        "col": 0,
        "byteIndex": 2170
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "A a visual container for content segments that typically expands and collapses vertically, one at a time. Often used for FAQs, information sections, settings/preferences, or any situation where presenting information in a manageable, space-saving way is desired.\n\nIt relies on the {@linkcode /@lunchbox/ui/doc/atoms/~/Details | Details} atom for building it, providing a higher level abstraction with a more specific usage for building expand/collapse patterns. You may directly use the  {@linkcode /@lunchbox/ui/doc/atoms/~/Details | Details} atom to create custom accordions, or use this pre-built\n",
        "tags": [
          {
            "kind": "unsupported",
            "value": "@todo [DEV] Manage appropriate aria roles for the parts of this molecule. Client reactivity?"
          },
          {
            "kind": "unsupported",
            "value": "@todo [DEV] Implement additional visual hierarchies in the component's design."
          },
          {
            "kind": "unsupported",
            "value": "@todo [DEV] Add simple CSS animations that improve the feeling of use.\n"
          },
          {
            "kind": "example",
            "doc": "```ts\nimport Accordion from 'lunchbox/molecules/Accordion.tsx';\n\n<Accordion summary='Click me'>\n  <p>Hello</p>\n</Accordion>\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "props",
            "optional": false,
            "tsType": {
              "repr": "Partial",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "iAccordion",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "iAccordion"
                    }
                  }
                ],
                "typeName": "Partial"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "iAccordion",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/Accordion.tsx",
        "line": 6,
        "col": 0,
        "byteIndex": 198
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Property interface for the `Accordion` molecule."
      },
      "kind": "interface",
      "interfaceDef": {
        "extends": [],
        "constructors": [],
        "methods": [],
        "properties": [
          {
            "name": "summary",
            "jsDoc": {
              "doc": "The text content of the summary element that toggles the disclosure box open/closed when clicked."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/Accordion.tsx",
              "line": 10,
              "col": 2,
              "byteIndex": 345
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "open",
            "jsDoc": {
              "doc": "Whether the disclosure box is initially open or closed. This property does not control the opening\nand closing of the Accordion and should not be used in client reactivity."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/Accordion.tsx",
              "line": 16,
              "col": 2,
              "byteIndex": 560
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "typeParams": []
          },
          {
            "name": "name",
            "jsDoc": {
              "doc": "This property names multiple Accordion molecules and allows for an exclusive expansion behavior,\nwhere opening an Accordion the one that is open and has the same name. This functionality is native\nto HTML and does not require client reactivity to function."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/Accordion.tsx",
              "line": 23,
              "col": 2,
              "byteIndex": 862
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "children",
            "jsDoc": {
              "doc": "The content that will be shown/hidden in the disclosure box"
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/Accordion.tsx",
              "line": 28,
              "col": 2,
              "byteIndex": 956
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "ComponentChildren",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ComponentChildren"
              }
            },
            "typeParams": []
          }
        ],
        "callSignatures": [],
        "indexSignatures": [],
        "typeParams": []
      }
    },
    {
      "name": "FieldsetCheck",
      "isDefault": true,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetCheck.tsx",
        "line": 58,
        "col": 0,
        "byteIndex": 2074
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The `FieldsetCheck` molecule renders a group of checkboxes within a fieldset, allowing users to select multiple options. This component is designed to work with the `Input` atom and the `InputCheck` molecule, providing a structured way to present checkbox inputs in a form. Each checkbox is associated with a shared name, which is crucial for form submission and accessibility. Note that there isn't a \"required\" prop for this component because native HTML behaviors do not support marking a fieldset of\ncheckboxes as required. Instead, validation should be handled externally.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```ts\nimport { FieldsetCheck } from 'lunchbox/molecules';\n\n<FieldsetCheck\n  values={['Option 1', 'Option 2']}\n  legend=\"Select Options\"\n  error=\"Please select at least one option.\"\n  name=\"options\"\n/>\n```"
          },
          {
            "kind": "unsupported",
            "value": "@todo [DEV] Add errors if values.length is 0 or if name is an empty string."
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "props",
            "optional": false,
            "tsType": {
              "repr": "Partial",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "iFieldsetCheck",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "iFieldsetCheck"
                    }
                  }
                ],
                "typeName": "Partial"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "iFieldsetCheck",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetCheck.tsx",
        "line": 8,
        "col": 0,
        "byteIndex": 327
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Property interface for the `FieldsetCheck` molecule."
      },
      "kind": "interface",
      "interfaceDef": {
        "extends": [],
        "constructors": [],
        "methods": [],
        "properties": [
          {
            "name": "values",
            "jsDoc": {
              "doc": "This property represents the values available for selection."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetCheck.tsx",
              "line": 12,
              "col": 2,
              "byteIndex": 441
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            "typeParams": []
          },
          {
            "name": "legend",
            "jsDoc": {
              "doc": "The title for the fieldset of checkboxes."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetCheck.tsx",
              "line": 17,
              "col": 2,
              "byteIndex": 521
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "error",
            "jsDoc": {
              "doc": "An error message to be displayed relative to this fieldset. It also alters the appearance of the\ncomponent, giving it contrast against other parts of the form."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetCheck.tsx",
              "line": 23,
              "col": 2,
              "byteIndex": 722
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "name",
            "jsDoc": {
              "doc": "The identifier that must be shared by all checkbox inputs inside this fieldset so that they're\nrelated in the form's context."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetCheck.tsx",
              "line": 29,
              "col": 2,
              "byteIndex": 888
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          }
        ],
        "callSignatures": [],
        "indexSignatures": [],
        "typeParams": []
      }
    },
    {
      "name": "FieldsetRadio",
      "isDefault": true,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetRadio.tsx",
        "line": 66,
        "col": 0,
        "byteIndex": 2236
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The `FieldsetRadio` component is a wrapper for a group of radio inputs, allowing users to select one option from a set.It is designed to enhance accessibility and usability by grouping related radio buttons under a common legend. This component utilizes the `Input` atom for styling and structure, ensuring a consistent look and feel across forms.The `InputRadio` molecule is used for each individual radio button, which allows for easy customization and management of radio inputs.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```ts\nimport { FieldsetRadio } from 'lunchbox/molecules';\n\n<FieldsetRadio\n  values={['Option 1', 'Option 2', 'Option 3']}\n  legend=\"Choose an option\"\n  error=\"This field is required\"\n  name=\"options\"\n  required={true}\n/>\n```"
          },
          {
            "kind": "unsupported",
            "value": "@todo [DEV] Add errors if values.length is 0 or if name is an empty string."
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "props",
            "optional": false,
            "tsType": {
              "repr": "Partial",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "iFieldsetRadio",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "iFieldsetRadio"
                    }
                  }
                ],
                "typeName": "Partial"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "iFieldsetRadio",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetRadio.tsx",
        "line": 9,
        "col": 0,
        "byteIndex": 370
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Property interface for the `FieldsetRadio` molecule."
      },
      "kind": "interface",
      "interfaceDef": {
        "extends": [],
        "constructors": [],
        "methods": [],
        "properties": [
          {
            "name": "values",
            "jsDoc": {
              "doc": "This property represents the values available for selection."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetRadio.tsx",
              "line": 13,
              "col": 2,
              "byteIndex": 484
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            "typeParams": []
          },
          {
            "name": "legend",
            "jsDoc": {
              "doc": "The title for the group of radio inputs."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetRadio.tsx",
              "line": 18,
              "col": 2,
              "byteIndex": 563
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "error",
            "jsDoc": {
              "doc": "An error message to be displayed relative to this fieldset. It also alters the appearance of the\ncomponent, giving it contrast against other parts of the form."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetRadio.tsx",
              "line": 24,
              "col": 2,
              "byteIndex": 764
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "name",
            "jsDoc": {
              "doc": "The identifier that must be shared by all radio inputs inside this fieldset so that they're related\nin the form's context."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetRadio.tsx",
              "line": 30,
              "col": 2,
              "byteIndex": 927
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "required",
            "jsDoc": {
              "doc": "This adds the `required` tag to the first radio input of the fieldset, this natively makes the\nwhole fieldset required for submission."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/FieldsetRadio.tsx",
              "line": 36,
              "col": 2,
              "byteIndex": 1101
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "typeParams": []
          }
        ],
        "callSignatures": [],
        "indexSignatures": [],
        "typeParams": []
      }
    },
    {
      "name": "InputCheck",
      "isDefault": true,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputCheck.tsx",
        "line": 56,
        "col": 0,
        "byteIndex": 1775
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "A checkbox input component that allows users to select one or more options. This component is built using the `<Input />` atom, which provides the underlying functionality for the checkbox and its label. The `InputCheck` molecule manages the relationship between multiple checkboxes through the `name` property, ensuring that they are grouped correctly in the form's context.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport { InputCheck } from 'lunchbox/molecules';\n\n<InputCheck\n  label=\"Accept Terms and Conditions\"\n  error=\"You must accept the terms.\"\n  name=\"terms\"\n  required={true}\n/>\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "props",
            "optional": false,
            "tsType": {
              "repr": "Partial",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "iInputCheck",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "iInputCheck"
                    }
                  }
                ],
                "typeName": "Partial"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "iInputCheck",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputCheck.tsx",
        "line": 7,
        "col": 0,
        "byteIndex": 281
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Property interface for the `InputCheck` molecule."
      },
      "kind": "interface",
      "interfaceDef": {
        "extends": [],
        "constructors": [],
        "methods": [],
        "properties": [
          {
            "name": "label",
            "jsDoc": {
              "doc": "The input's title. It is built using the `<label/>` element already without the need of linking\nthem with the ids."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputCheck.tsx",
              "line": 12,
              "col": 2,
              "byteIndex": 451
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "error",
            "jsDoc": {
              "doc": "An error message to be displayed relative to this input. It also alters the appearance of the\ncomponent, giving it contrast against other parts of the form."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputCheck.tsx",
              "line": 18,
              "col": 2,
              "byteIndex": 648
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "name",
            "jsDoc": {
              "doc": "The identifier that must be shared by other checkbox inputs inside so that they're related in the\nform's context."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputCheck.tsx",
              "line": 24,
              "col": 2,
              "byteIndex": 802
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "required",
            "jsDoc": {
              "doc": "Makes this input required during form submission."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputCheck.tsx",
              "line": 29,
              "col": 2,
              "byteIndex": 886
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "typeParams": []
          }
        ],
        "callSignatures": [],
        "indexSignatures": [],
        "typeParams": []
      }
    },
    {
      "name": "InputField",
      "isDefault": true,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputField.tsx",
        "line": 56,
        "col": 0,
        "byteIndex": 1827
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "A molecule component that renders an input field with a label and optional error message. This component is designed to be used in forms where user input is required. It integrates with the `Input` atom to provide a consistent styling and behavior for input elements. The `InputField` allows you to specify a label, an error message, and whether the input is required. If an error message is provided, the input field will visually indicate an error state.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```ts\nimport { InputField } from 'lunchbox/molecules';\n\nfunction MyForm() {\n  return (\n    <form>\n      <InputField\n        label=\"Username\"\n        error=\"This field is required.\"\n        required={true}\n      />\n    </form>\n  );\n}\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "props",
            "optional": false,
            "tsType": {
              "repr": "Partial",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "iInputField",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "iInputField"
                    }
                  }
                ],
                "typeName": "Partial"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "iInputField",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputField.tsx",
        "line": 9,
        "col": 0,
        "byteIndex": 354
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Property interface for the `InputField` molecule."
      },
      "kind": "interface",
      "interfaceDef": {
        "extends": [],
        "constructors": [],
        "methods": [],
        "properties": [
          {
            "name": "label",
            "jsDoc": {
              "doc": "The input's title. It is built using the `<label/>` element already without the need of linking\nthem with the ids."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputField.tsx",
              "line": 14,
              "col": 2,
              "byteIndex": 524
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "error",
            "jsDoc": {
              "doc": "An error message to be displayed relative to this input. It also alters the appearance of the\ncomponent, giving it contrast against other parts of the form."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputField.tsx",
              "line": 20,
              "col": 2,
              "byteIndex": 721
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "required",
            "jsDoc": {
              "doc": "Makes this input required during form submission."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputField.tsx",
              "line": 25,
              "col": 2,
              "byteIndex": 806
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "typeParams": []
          }
        ],
        "callSignatures": [],
        "indexSignatures": [],
        "typeParams": []
      }
    },
    {
      "name": "InputRadio",
      "isDefault": true,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputRadio.tsx",
        "line": 51,
        "col": 0,
        "byteIndex": 1916
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "A radio input component that allows users to select one option from a set of related options. This component is built using the `<Input.Radio/>` atom and is designed to be used within a form. The `InputRadio` component requires a `label` for display, a `name` to group related radio inputs, and a `required` flag to enforce validation during form submission. The `name` prop ensures that all radio buttons with the same name are treated as a single group, allowing only one selection at a time. This component is closely related to the `Input` atom, which provides the underlying structure and functionality for the radio input and label elements.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage\n```ts\nimport { InputRadio } from 'lunchbox/molecules';\n\nfunction MyForm() {\n  return (\n    <form>\n      <InputRadio label=\"Option 1\" name=\"options\" required={true} />\n      <InputRadio label=\"Option 2\" name=\"options\" required={true} />\n    </form>\n  );\n}\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "props",
            "optional": false,
            "tsType": {
              "repr": "Partial",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "iInputRadio",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "iInputRadio"
                    }
                  }
                ],
                "typeName": "Partial"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "iInputRadio",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputRadio.tsx",
        "line": 7,
        "col": 0,
        "byteIndex": 281
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Property interface for the `InputRadio` molecule."
      },
      "kind": "interface",
      "interfaceDef": {
        "extends": [],
        "constructors": [],
        "methods": [],
        "properties": [
          {
            "name": "label",
            "jsDoc": {
              "doc": "The input's title. It is built using the `<label/>` element already without the need of linking\nthem with the ids."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputRadio.tsx",
              "line": 12,
              "col": 2,
              "byteIndex": 451
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "name",
            "jsDoc": {
              "doc": "The identifier that must be shared by other radio inputs inside so that they're related in the\nform's context."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputRadio.tsx",
              "line": 18,
              "col": 2,
              "byteIndex": 602
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "required",
            "jsDoc": {
              "doc": "Makes this input required during form submission."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputRadio.tsx",
              "line": 23,
              "col": 2,
              "byteIndex": 686
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "typeParams": []
          }
        ],
        "callSignatures": [],
        "indexSignatures": [],
        "typeParams": []
      }
    },
    {
      "name": "InputSelect",
      "isDefault": true,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputSelect.tsx",
        "line": 59,
        "col": 0,
        "byteIndex": 2244
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The `InputSelect` molecule is a customizable select input component that allows users to choose from a list of options. It integrates with the `Input` atom to provide a consistent styling and behavior across form elements. This component accepts a label, an error message, and a required flag to enhance user experience and form validation. The `InputSelect` molecule utilizes the `Input` atom for rendering the label, select, and error message. This ensures that the styling and functionality are consistent with other input components in the library.\n",
        "tags": [
          {
            "kind": "unsupported",
            "value": "@todo [DEV] Implement the special functionality for `default` and `placeholder` properties."
          },
          {
            "kind": "unsupported",
            "value": "@todo [DEV] Implement an `<Input.Option>` atom for this molecule's children.\n"
          },
          {
            "kind": "example",
            "doc": "```ts\nimport { InputSelect } from 'lunchbox/molecules';\n\nconst MyForm = () => (\n  <InputSelect label=\"Choose an option\" error=\"This field is required\" required>\n    <option value=\"option1\">Option 1</option>\n    <option value=\"option2\">Option 2</option>\n  </InputSelect>\n);\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "props",
            "optional": false,
            "tsType": {
              "repr": "Partial",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "iInputSelect",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "iInputSelect"
                    }
                  }
                ],
                "typeName": "Partial"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "iInputSelect",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputSelect.tsx",
        "line": 8,
        "col": 0,
        "byteIndex": 344
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Property interface for the `InputSelect` molecule."
      },
      "kind": "interface",
      "interfaceDef": {
        "extends": [],
        "constructors": [],
        "methods": [],
        "properties": [
          {
            "name": "label",
            "jsDoc": {
              "doc": "The input's title. It is built using the `<label/>` element already without the need of linking\nthem with the ids."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputSelect.tsx",
              "line": 13,
              "col": 2,
              "byteIndex": 515
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "error",
            "jsDoc": {
              "doc": "An error message to be displayed relative to this input. It also alters the appearance of the\ncomponent, giving it contrast against other parts of the form."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputSelect.tsx",
              "line": 19,
              "col": 2,
              "byteIndex": 712
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "required",
            "jsDoc": {
              "doc": "Makes this input required during form submission."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputSelect.tsx",
              "line": 24,
              "col": 2,
              "byteIndex": 797
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "typeParams": []
          },
          {
            "name": "children",
            "jsDoc": {
              "doc": "This property helps add options to the select field."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputSelect.tsx",
              "line": 29,
              "col": 2,
              "byteIndex": 889
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "ComponentChildren",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ComponentChildren"
              }
            },
            "typeParams": []
          }
        ],
        "callSignatures": [],
        "indexSignatures": [],
        "typeParams": []
      }
    },
    {
      "name": "InputTextarea",
      "isDefault": true,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputTextarea.tsx",
        "line": 49,
        "col": 0,
        "byteIndex": 1819
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "A textarea input component that allows users to enter multi-line text. This component is built using the `Input` atom, which provides the basic structure and styling for input elements. The `InputTextarea` molecule enhances the `Input` atom by adding features such as a label, error messaging, and required field validation. The `InputTextarea` is designed to be flexible and can be used in various forms where multi-line text input is needed. It automatically handles the display of error messages and can indicate whether the field is required for form submission.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```ts\nimport { InputTextarea } from 'lunchbox/molecules';\n\n<InputTextarea\n  label=\"Description\"\n  error=\"This field is required.\"\n  required={true}\n/>\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "props",
            "optional": false,
            "tsType": {
              "repr": "Partial",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "iInputTextarea",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "iInputTextarea"
                    }
                  }
                ],
                "typeName": "Partial"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "iInputTextarea",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputTextarea.tsx",
        "line": 8,
        "col": 0,
        "byteIndex": 327
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Property interface for the `InputTextarea` molecule."
      },
      "kind": "interface",
      "interfaceDef": {
        "extends": [],
        "constructors": [],
        "methods": [],
        "properties": [
          {
            "name": "label",
            "jsDoc": {
              "doc": "The input's title. It is built using the `<label/>` element already without the need of linking\nthem with the ids."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputTextarea.tsx",
              "line": 13,
              "col": 2,
              "byteIndex": 500
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "error",
            "jsDoc": {
              "doc": "An error message to be displayed relative to this input. It also alters the appearance of the\ncomponent, giving it contrast against other parts of the form."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputTextarea.tsx",
              "line": 19,
              "col": 2,
              "byteIndex": 697
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "required",
            "jsDoc": {
              "doc": "Makes this input required during form submission."
            },
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/InputTextarea.tsx",
              "line": 24,
              "col": 2,
              "byteIndex": 782
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "typeParams": []
          }
        ],
        "callSignatures": [],
        "indexSignatures": [],
        "typeParams": []
      }
    },
    {
      "name": "Markdown",
      "isDefault": true,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/Markdown.tsx",
        "line": 44,
        "col": 0,
        "byteIndex": 1555
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The `Markdown` component renders markdown content as HTML using the specified render options. It allows for customization of rendering behavior through the `renderOptions` property. This component is useful for displaying formatted text, such as documentation or articles, that is written in markdown syntax. It leverages the `@deno/gfm` library for rendering.\n",
        "tags": [
          {
            "kind": "unsupported",
            "value": "@todo [DEV] Add the KatexStyles atom to the page's head when the allowMath option is true.\n"
          },
          {
            "kind": "example",
            "doc": "```ts\nimport { Markdown } from 'lunchbox/molecules';\n\nconst markdownContent = '# Hello World\\nThis is a markdown example.';\n\n<Markdown content={markdownContent} />\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "identifier",
            "name": "props",
            "optional": false,
            "tsType": {
              "repr": "Partial",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "iMarkdown",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "iMarkdown"
                    }
                  }
                ],
                "typeName": "Partial"
              }
            }
          }
        ],
        "returnType": {
          "repr": "JSX.Element",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "JSX.Element"
          }
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "iMarkdown",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/Markdown.tsx",
        "line": 8,
        "col": 0,
        "byteIndex": 330
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Property interface for the `Markdown` molecule."
      },
      "kind": "interface",
      "interfaceDef": {
        "extends": [],
        "constructors": [],
        "methods": [],
        "properties": [
          {
            "name": "content",
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/Markdown.tsx",
              "line": 9,
              "col": 2,
              "byteIndex": 361
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "typeParams": []
          },
          {
            "name": "renderOptions",
            "location": {
              "filename": "file:///Users/oscaralfonsoguerrero/Documents/GitHub/lunchbox/ui/molecules/Markdown.tsx",
              "line": 10,
              "col": 2,
              "byteIndex": 380
            },
            "params": [],
            "computed": false,
            "optional": false,
            "tsType": {
              "repr": "RenderOptions",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "RenderOptions"
              }
            },
            "typeParams": []
          }
        ],
        "callSignatures": [],
        "indexSignatures": [],
        "typeParams": []
      }
    }
  ]
}
